"Level validation"
enum Level{
    beginner
    intermediate
    advanced
}

type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
    people: [Student]
    level: Level
}

interface Person{
    _id: ID!
    name: String!
    email: String!
}

type Student implements Person{
    _id: ID!
    name: String!
    email: String!
    avatar: String
}

type Monitor implements Person{
    _id: ID!
    name: String!
    email: String!
    phone: String 
}

type Query {
    "Return all courses"
        getCourses: [Course]
    "Return one Course"
        getCourse(id: ID!): Course
    "Return all Students"
        getPeople: [Person]
    "Return one Course"
        getPerson(id: ID!): Person
}

input CourseInput{
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput{
    title: String
    teacher: String
    description: String
    topic: String
}

input PersonInput{
    name: String!
    email: String!
    phone: String
    avatar: String
}

input PersonEditInput{
    name: String
    email: String
    phone: String
    avatar: String
}

input StudentEditInput{
    name: String
    email: String
}

type Mutation{
    "Create course"
    createCourse(input: CourseInput!): Course
    "Edit Course"
    editCourse(_id: ID!, input: CourseEditInput): Course
    "Remove Course"
    removeCourse(_id: ID!): Boolean
    "Create Person"
    createPerson(input: PersonInput!): Person
    "Edit Person"
    editPerson(_id: ID!, input: PersonEditInput): Person
    "Remove Person"
    removePerson(_id: ID!): Boolean
    "Add Person to course"
    addStudent(courseID: ID!, studentID: ID!): Course
}